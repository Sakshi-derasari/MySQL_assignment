1. What is a stored procedure in SQL, and how does it differ from a standard SQL query?

Stored Procedure in SQL:

A stored procedure is a precompiled collection of one or more SQL statements that are stored together in the database and can be executed as a single unit. It is essentially a set of SQL queries and commands that can be invoked by a name from the database.

Key Characteristics of a Stored Procedure:

Precompiled: Stored procedures are precompiled, meaning they are parsed and optimized by the database when they are created, not each time they are executed. This can improve performance because the database doesn’t need to re-parse and optimize the SQL each time.
Reusable: Once created, stored procedures can be reused multiple times by calling them with a simple command, which promotes reusability and maintainability.
Encapsulation: They encapsulate complex business logic, allowing it to be executed in the database rather than having it scattered across multiple application code files. This centralizes the logic and makes it easier to maintain.
Accept Parameters: Stored procedures can accept input parameters, and they can return output parameters or result sets. This makes them flexible for a variety of use cases.
Error Handling: Stored procedures can contain error-handling mechanisms using constructs like TRY-CATCH in SQL Server or EXCEPTION in PL/SQL (Oracle), which helps manage errors more efficiently.
Transaction Management: Stored procedures can handle transaction management by using COMMIT, ROLLBACK, and SAVEPOINT commands. This allows for better control over data consistency and integrity.

Calling the Stored Procedure:
CALL GetAvgSalaryByDepartment('Sales');



2. Explain the advantages of using stored procedures.

Advantages of Using Stored Procedures in SQL
Stored procedures offer several benefits over standard SQL queries and are a key component of many database systems. Here’s a detailed breakdown of the advantages of using stored procedures:

1. Improved Performance
Precompiled Execution: Stored procedures are precompiled and stored in the database. When they are first created, the SQL statements inside are parsed and optimized by the database engine. This eliminates the need for parsing and optimizing each SQL statement every time it's executed, which can significantly improve execution speed, especially for complex queries.
Reduced Network Traffic: Stored procedures can reduce the amount of data transferred between the client and server. Instead of sending multiple SQL queries over the network, the client only needs to call the stored procedure, which reduces network overhead.

2. Code Reusability
Centralized Logic: Once a stored procedure is created, it can be reused multiple times by different applications or parts of the same application. This promotes DRY (Don't Repeat Yourself) principles, ensuring the same logic doesn’t need to be re-implemented each time.
Easy Maintenance: If the business logic in a stored procedure needs to change, the modification only needs to be made in the stored procedure itself, rather than in every place where the SQL logic is repeated. This simplifies maintenance and reduces the risk of inconsistent behavior.

3. Security and Access Control
Granular Permissions: Stored procedures allow access control over the database by granting permissions on the procedure rather than directly on the tables. For example, a user can be granted the ability to execute a stored procedure without having direct access to the underlying data.
Data Hiding: Stored procedures can hide the complexity of the underlying database schema from users and applications. Users can call stored procedures to manipulate data, without knowing the exact structure of the database.

4. Transaction Control
Automatic Transaction Management: Stored procedures can handle transaction control (e.g., using COMMIT, ROLLBACK, and SAVEPOINT) within the procedure. This ensures that a group of related SQL statements is treated as a single unit of work, maintaining data consistency even in the event of an error.
Atomic Operations: By grouping multiple SQL statements into a stored procedure, you ensure that the operations are atomic, meaning they either complete entirely or not at all. This helps preserve the integrity of the data.

5. Better Error Handling
Structured Error Handling: Stored procedures can include error-handling mechanisms (such as TRY-CATCH blocks in SQL Server or EXCEPTION in PL/SQL). This makes it easier to catch and manage errors, ensuring that the application gets useful feedback when something goes wrong.
Custom Error Messages: Stored procedures can return custom error messages, which helps in identifying the cause of failures and enables the application to handle errors more gracefully.

6. Better Scalability
Optimized for High Traffic: Stored procedures are designed to handle large volumes of data and complex operations efficiently. When properly designed, stored procedures can scale well as database traffic increases, since the database engine can optimize execution and caching for repeated operations.